Project Overview
Intelligent Investigation Machine (IIM) - A Blazor Hybrid + WSL2 desktop application for law enforcement AI investigations. Premium training platform delivered as part of the "AI Investigator Mastery Bootcamp" running entirely on-premises on Framework PCs with 128GB RAM and AMD GPUs.
Current Solution Structure
/src
├── IIM.Shared/          # DTOs, Enums, Common Models (no dependencies)
│   ├── DTOs/           # API request/response contracts
│   ├── Enums/          # Shared enumerations  
│   └── Models/         # TimeRange, FileMetadata, etc.
│
├── IIM.Infrastructure/  # External services, WSL, Storage
│   └── Platform/       # ✅ PHASE 1 COMPLETE
│       ├── IWslManager.cs (interface)
│       ├── WslManager.cs 
│       ├── WslManager.Core.cs
│       ├── WslManager.Docker.cs
│       ├── WslManager.Files.cs
│       └── WslServiceOrchestrator.cs
│
├── IIM.Plugin.SDK/     # Plugin interfaces for extensibility
│
├── IIM.Core/           # Domain models, business logic
│   ├── Models/         # Case, Evidence, Investigation, ModelConfiguration
│   ├── Services/       # Core business services, Export services, SessionService
│   ├── AI/            
│   │   ├── ModelOrchestrator.cs (✅ Working implementation)
│   │   ├── DefaultModelOrchestrator.cs
│   │   ├── SemanticKernelOrchestrator.cs (✅ NEW - SK integration)
│   │   └── IModelOrchestrator.cs (interface)
│   ├── Inference/     
│   │   └── InferencePipeline.cs (⚠️ Needs queue processing completion)
│   ├── RAG/           # ⚠️ Empty implementations
│   ├── Mediator/      # ✅ Custom mediator (complete, working)
│   ├── Configuration/ # ✅ Template system (complete)
│   │   └── IModelConfigurationTemplate.cs
│   ├── Extensions/    # ✅ NEW - SK service registration
│   │   └── SemanticKernelServiceExtensions.cs
│   └── Plugins/       # ✅ NEW - SK Plugins
│       └── ForensicAnalysisPlugin.cs
│
├── IIM.Application/    # Application services, CQRS
│   ├── Commands/      # ✅ CQRS commands with handlers
│   │   ├── Wsl/       # Including ConfigureProxyCommand
│   │   ├── Models/    # Load/Unload model commands
│   │   └── Investigation/
│   ├── Queries/       # ✅ Query handlers
│   ├── Behaviors/     # ✅ 7 Pipeline behaviors (all working)
│   └── Services/      
│       ├── InferenceService.cs (Functional with basic implementation)
│       └── InvestigationService.cs (Working)
│
├── IIM.Api/           # HTTP endpoints, Minimal APIs
│   └── Program.cs     # All endpoints defined here
│
├── IIM.Components/    # Blazor UI components
│   └── Components/    # UI components for investigations
│
└── IIM.Desktop/       # Windows Forms host
    └── Program.cs     # ✅ Updated with SK support (builds successfully)

/tests
├── IIM.Core.Tests/
│   ├── Infrastructure/
│   │   └── WslManagerTests.cs
│   └── Mocks/
│       ├── MockWslManager.cs (✅ Complete implementation)
│       └── MockModelOrchestrator.cs
└── IIM.Integration.Tests/
✅ COMPLETED WORK
Phase 1: WSL & Docker Foundation (COMPLETE)

WslManager: Full WSL2 management with Docker orchestration
Service Orchestration: Qdrant (6333), PostgreSQL (5432), MinIO (9000/9001)
Non-admin support: PowerShell script generation for IT departments
Tor proxy support: InstallTorAndApplyProxyAsync implementation

Mediator Pattern (COMPLETE)

Custom Mediator: Fully implemented without MediatR dependency
7 Pipeline Behaviors: Logging, Validation, Performance, Caching, Retry, Transaction, Audit
Notification System: Complete with handlers for WSL, Model, and Investigation events
Command/Query Handlers: Full CQRS implementation

Template System (COMPLETE)

ModelConfigurationTemplate: Full template management for investigation types
Template Service: Save/load/apply templates to sessions
System Templates: Pre-configured templates for different investigation scenarios

Semantic Kernel Integration (NEW - COMPLETE)

SemanticKernelOrchestrator: Implements IModelOrchestrator interface
SK Service Extensions: Clean DI registration
ForensicAnalysisPlugin: First SK plugin with investigation functions
Backward Compatible: Works alongside existing ModelOrchestrator

🚧 CURRENT STATUS
What's Working:

Build Status: ✅ Solution builds successfully
WSL Management: ✅ Fully functional
Mediator Pattern: ✅ All commands/queries working
Template System: ✅ Models loaded from templates
Basic Inference: ✅ Mock inference working
SK Integration: ✅ Compiles and ready for testing

What Needs Work:

DirectML/ONNX: Package installed but no actual GPU inference
InferencePipeline: Queue processing incomplete
RAG Implementation: Empty, needs document ingestion
Real Model Loading: Currently using mocks

📋 NEXT STEPS (Priority Order)
Sprint 1: Test SK Integration (This Week)
csharp// 1. Test SK orchestrator with mock models
var orchestrator = ServiceProvider.GetRequiredService<IModelOrchestrator>();
var models = await orchestrator.GetAvailableModelsAsync();
await orchestrator.LoadModelAsync(new ModelRequest { ... });

// 2. Test ForensicAnalysisPlugin
var plugin = ServiceProvider.GetRequiredService<ForensicAnalysisPlugin>();
var hash = await plugin.CalculateHashAsync("evidence.pdf");

// 3. Verify template integration
var templates = await templateService.GetTemplatesAsync();
Sprint 2: Complete DirectML/ONNX (Week 2)
csharp// 1. Implement DirectMLTextGenerationService properly
public class DirectMLTextGenerationService : ITextGenerationService
{
    private readonly InferenceSession _session;
    
    public DirectMLTextGenerationService(string modelPath)
    {
        var sessionOptions = new SessionOptions();
        sessionOptions.AppendExecutionProvider_DML(0);
        _session = new InferenceSession(modelPath, sessionOptions);
    }
    
    // Actual tensor operations here
}

// 2. Test with real ONNX models
// 3. Benchmark GPU vs CPU performance
Sprint 3: Complete InferencePipeline (Week 3)

Fix queue processing loop
Implement priority-based scheduling
Add batch processing
Handle cancellation properly

Sprint 4: RAG Implementation (Week 4)

Document chunking strategies
Embedding generation with ONNX
Qdrant integration
Citation extraction

🎯 Configuration for Testing
appsettings.json
json{
  "Storage": {
    "LocalBasePath": "C:\\\\Users\\\\[username]\\\\AppData\\\\Local\\\\IIM"
  },
  "Models": {
    "BasePath": "C:\\\\Users\\\\[username]\\\\AppData\\\\Local\\\\IIM\\\\Models"
  },
  "Api": {
    "BaseUrl": "http://localhost:5080"
  },
  "Evidence": {
    "EnableEncryption": false,
    "RequireDualControl": false,
    "MaxFileSizeMb": 10240
  }
}
To Switch Between Orchestrators:
Option 1: Keep Existing (Safe)
csharp// In Program.cs
services.AddSingleton<IModelOrchestrator, ModelOrchestrator>();
Option 2: Use Semantic Kernel (New)
csharp// In Program.cs
services.AddSemanticKernelOrchestration();
services.AddInvestigationPlugins();
🔧 Technical Decisions

Semantic Kernel over Custom: Better plugin ecosystem, Microsoft support
DirectML over ROCm: ROCm unstable on Windows, DirectML is native
ONNX Format: Best DirectML compatibility
Custom Mediator: Full control, no external dependencies
Templates First: Models discovered from templates, not hardcoded

📊 Success Metrics
Current phase complete when:

✅ SK successfully loads a model
✅ Inference pipeline processes a request
✅ ForensicAnalysisPlugin executes a function
⬜ DirectML runs inference on GPU
⬜ RAG returns results with citations
⬜ Memory usage under 64GB for typical workload

💡 Development Commands
bash# Build
dotnet build

# Run Desktop App
dotnet run --project src/IIM.Desktop

# Run API
dotnet run --project src/IIM.Api

# Run Tests
dotnet test

# Check WSL Status
wsl --list --verbose

# Start Docker in WSL
wsl -d IIM-Ubuntu -- docker ps
🐛 Known Issues



📝 Notes for Developers

Current State: WSL works, SK integrated, ready for AI implementation
Next Priority: Test SK with real models
Blockers: Need actual ONNX model files

Testing: Use MockWslManager for unit tests

Remember: This is for law enforcement training - reliability and ease of use are paramount. The system must "just work" out of the box for non-technical users.