@using IIM.App.Hybrid.Components.Chat
@using IIM.Core.Models

<div class="message-wrapper">
    <div class="message @Message.Role.ToString().ToLower()">
        <div class="message-avatar">
            @if (Message.Role == MessageRole.User)
            {
                <span>U</span>
            }
            else if (Message.Role == MessageRole.Assistant)
            {
                <i class="fas fa-robot"></i>
            }
            else if (Message.Role == MessageRole.Tool)
            {
                <i class="fas fa-tools"></i>
            }
        </div>

        <div class="message-content">
            <div class="message-header">
                <span class="message-author">@GetAuthorName()</span>
                @if (!string.IsNullOrEmpty(Message.ModelUsed))
                {
                    <span class="message-badge">@Message.ModelUsed</span>
                }
                <span class="message-time">@Message.Timestamp.ToString("HH:mm")</span>
            </div>

            <div class="message-text">
                @((MarkupString)FormatContent(Message.Content))
            </div>

            @if (Message.Attachments?.Any() == true)
            {
                <div class="message-attachments">
                    @foreach (var attachment in Message.Attachments)
                    {
                        <AttachmentCard Attachment="@attachment" />
                    }
                </div>
            }

@if (Message.ToolResults?.Any() == true)
{
    <div class="tool-results">
        @foreach (var result in Message.ToolResults)
        {
                        <ToolResult Result="@result" OnExecute="@((Dictionary<string, object> parameters) => HandleToolExecute(result.ToolName, parameters))" />
        }
    </div>
}

            @if (Message.Citations?.Any() == true)
            {
                <div class="citations">
                    <div class="citations-header">
                        <i class="fas fa-quote-right"></i>
                        <span>Citations</span>
                    </div>
                    @foreach (var citation in Message.Citations)
                    {
                        <CitationViewer Citation="@citation" OnClick="@(() => OnCitationClick.InvokeAsync(citation))" />
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public Core.Models.InvestigationMessage Message { get; set; } = new();  // Keep Core.Models to disambiguate
    [Parameter] public EventCallback<(string toolName, Dictionary<string, object> parameters)> OnToolExecute { get; set; }
    [Parameter] public EventCallback<string> OnEvidenceView { get; set; }
    [Parameter] public EventCallback<Core.Models.Citation> OnCitationClick { get; set; }  // Also disambiguate Citation if needed

    private string GetAuthorName() => Message.Role switch
    {
        MessageRole.User => "You",
        MessageRole.Assistant => "IIM Assistant",
        MessageRole.System => "System",
        MessageRole.Tool => "Tool",
        _ => "Unknown"
    };

    private string FormatContent(string content)
    {
        // Basic markdown formatting
        content = System.Text.RegularExpressions.Regex.Replace(content, @"\*\*(.*?)\*\*", "<strong>$1</strong>");
        content = System.Text.RegularExpressions.Regex.Replace(content, @"\*(.*?)\*", "<em>$1</em>");
        content = System.Text.RegularExpressions.Regex.Replace(content, @"`(.*?)`", "<code>$1</code>");
        content = content.Replace("\n", "<br>");
        return content;
    }

    private async Task HandleToolExecute(string toolName, Dictionary<string, object> parameters)
    {
        await OnToolExecute.InvokeAsync((toolName, parameters));
    }


    private async Task HandleToolExecuteForResult(Core.Models.ToolResult result, Dictionary<string, object> parameters)
    {
        await OnToolExecute.InvokeAsync((result.ToolName, parameters));
    }
}