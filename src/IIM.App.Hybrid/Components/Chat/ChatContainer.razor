// ============================================
// File: src/IIM.App.Hybrid/Components/Chat/ChatContainer.razor
// ============================================
@using IIM.Core.Models
@implements IDisposable

<div class="chat-container" @ref="chatElement">
    <div class="chat-messages">
        @if (Messages != null && Messages.Any())
        {
            <CascadingValue Value="this">
                @foreach (var message in Messages)
                {
                    <MessageBubble Message="@message" OnToolExecute="@OnToolExecute" OnEvidenceClick="@OnEvidenceClick"
                        OnCitationClick="@OnCitationClick" />
                }
            </CascadingValue>
        }
        else
        {
            <div class="chat-welcome">
                <div class="welcome-icon">
                    <i class="fas fa-shield-alt fa-4x"></i>
                </div>
                <h3>Welcome to IIM Investigation Platform</h3>
                <p class="text-muted">Start your investigation by asking a question or uploading evidence.</p>

                <div class="quick-actions">
                    @foreach (var action in QuickActions)
                    {
                        <button class="quick-action-btn" @onclick="() => OnQuickAction.InvokeAsync(action.Command)">
                            <i class="fas @action.Icon"></i>
                            <span>@action.Label</span>
                        </button>
                    }
                </div>
            </div>
        }

        @if (IsTyping)
        {
            <div class="typing-indicator">
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
                <div class="typing-dot"></div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public List<Core.Models.InvestigationMessage> Messages { get; set; } = new();
    [Parameter] public bool IsTyping { get; set; }
    [Parameter] public EventCallback<(string tool, Dictionary<string, object> parameters)> OnToolExecute { get; set; }
    [Parameter] public EventCallback<string> OnEvidenceClick { get; set; }
    [Parameter] public EventCallback<Citation> OnCitationClick { get; set; }
    [Parameter] public EventCallback<string> OnQuickAction { get; set; }

    private ElementReference chatElement;
    private Timer? _scrollTimer;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Messages?.Any() == true)
        {
            await ScrollToBottom();
        }
    }

    public async Task ScrollToBottom()
    {
        await chatElement.FocusAsync();
    }

    private List<QuickAction> QuickActions = new()
{
new QuickAction { Icon = "fa-search", Label = "Search Evidence", Command = "search" },
new QuickAction { Icon = "fa-clock", Label = "Build Timeline", Command = "timeline" },
new QuickAction { Icon = "fa-project-diagram", Label = "Network Analysis", Command = "network" },
new QuickAction { Icon = "fa-file-alt", Label = "Generate Report", Command = "report" }
};

    public void Dispose()
    {
        _scrollTimer?.Dispose();
    }

    private class QuickAction
    {
        public string Icon { get; set; } = "";
        public string Label { get; set; } = "";
        public string Command { get; set; } = "";
    }
}
