// ============================================
// File: src/IIM.App.Hybrid/Components/Chat/MessageBubble.razor
// ============================================
@using IIM.Core.Models

<div class="message-bubble @GetMessageClass()">
    <div class="message-avatar">
        @if (Message.Role == MessageRole.User)
        {
            <span class="avatar-text">@GetUserInitials()</span>
        }
        else if (Message.Role == MessageRole.Assistant)
        {
            <i class="fas fa-robot"></i>
        }
        else if (Message.Role == MessageRole.Tool)
        {
            <i class="fas fa-tools"></i>
        }
        else
        {
            <i class="fas fa-info-circle"></i>
        }
    </div>

    <div class="message-body">
        <div class="message-header">
            <span class="message-author">@GetAuthorName()</span>
            @if (!string.IsNullOrEmpty(Message.ModelUsed))
            {
                <span class="model-badge">@Message.ModelUsed</span>
            }
            <span class="message-timestamp">@Message.Timestamp.ToString("HH:mm")</span>
        </div>

        <div class="message-content">
            @if (!string.IsNullOrWhiteSpace(Message.Content))
            {
                <div class="message-text">
                    @((MarkupString)RenderMarkdown(Message.Content))
                </div>
            }

            @if (Message.Attachments?.Any() == true)
            {
                <div class="message-attachments">
                    @foreach (var attachment in Message.Attachments)
                    {
                        <div class="attachment" @onclick="() => OnAttachmentClick(attachment)">
                            <i class="fas @GetAttachmentIcon(attachment.Type)"></i>
                            <span>@attachment.FileName</span>
                            <span class="attachment-size">@FormatFileSize(attachment.Size)</span>
                        </div>
                    }
                </div>
            }

            @if (Message.ToolResults?.Any() == true)
            {
                <div class="tool-results-container">
                    @foreach (var result in Message.ToolResults)
                    {
                        <ToolResult Result="@result" OnRerun="@((p) => OnToolExecute.InvokeAsync((result.ToolName, p)))" />
                    }
                </div>
            }

            @if (Message.Citations?.Any() == true)
            {
                <div class="citations-container">
                    <div class="citations-header">
                        <i class="fas fa-bookmark"></i>
                        <span>Sources</span>
                    </div>
                    <div class="citations-list">
                        @foreach (var citation in Message.Citations.Take(3))
                        {
                            <div class="citation-item" @onclick="() => OnCitationClick.InvokeAsync(citation)">
                                <span class="citation-number">[@Message.Citations.IndexOf(citation) + 1]</span>
                                <span class="citation-text">@citation.Text.Substring(0, Math.Min(100,
                                                                citation.Text.Length))...</span>
                    </div>
                                        }
                        @if (Message.Citations.Count > 3)
                        {
                            <button class="show-more-citations" @onclick="ShowAllCitations">
                                Show @(Message.Citations.Count - 3) more sources
                            </button>
                        }
                    </div>
                </div>
            }
        </div>

        <div class="message-actions">
            <button class="action-btn" @onclick="CopyMessage" title="Copy">
                <i class="fas fa-copy"></i>
            </button>
            <button class="action-btn" @onclick="RegenerateMessage" title="Regenerate">
                <i class="fas fa-redo"></i>
            </button>
            <button class="action-btn" @onclick="EditMessage" title="Edit">
                <i class="fas fa-edit"></i>
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public InvestigationMessage Message { get; set; } = new();
    [Parameter] public EventCallback<(string tool, Dictionary<string, object> parameters)> OnToolExecute { get; set; }
    [Parameter] public EventCallback<string> OnEvidenceClick { get; set; }
    [Parameter] public EventCallback<Citation> OnCitationClick { get; set; }

    private string GetMessageClass() => Message.Role switch
    {
        MessageRole.User => "user-message",
        MessageRole.Assistant => "assistant-message",
        MessageRole.System => "system-message",
        MessageRole.Tool => "tool-message",
        _ => ""
    };

    private string GetAuthorName() => Message.Role switch
    {
        MessageRole.User => "You",
        MessageRole.Assistant => "IIM Assistant",
        MessageRole.System => "System",
        MessageRole.Tool => $"Tool: {Message.Metadata?["toolName"] ?? "Unknown"}",
        _ => "Unknown"
    };

    private string GetUserInitials()
    {
        // TODO: Get from user service
        return "JD";
    }

    private string RenderMarkdown(string content)
    {
        // TODO: Use proper markdown renderer
        content = System.Text.RegularExpressions.Regex.Replace(content, @"\*\*(.*?)\*\*", "<strong>$1</strong>");
        content = System.Text.RegularExpressions.Regex.Replace(content, @"\*(.*?)\*", "<em>$1</em>");
        content = System.Text.RegularExpressions.Regex.Replace(content, @"`(.*?)`", "<code>$1</code>");
        content = System.Text.RegularExpressions.Regex.Replace(content, @"```(.*?)```", "<pre><code>$1</code></pre>",
        System.Text.RegularExpressions.RegexOptions.Singleline);
        content = content.Replace("\n", "<br>");
        return content;
    }

    private string GetAttachmentIcon(AttachmentType type) => type switch
    {
        AttachmentType.Document => "fa-file-alt",
        AttachmentType.Image => "fa-image",
        AttachmentType.Audio => "fa-file-audio",
        AttachmentType.Video => "fa-file-video",
        AttachmentType.Archive => "fa-file-archive",
        _ => "fa-file"
    };

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double size = bytes;

        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }

        return $"{size:F1} {sizes[order]}";
    }

    private void OnAttachmentClick(Attachment attachment)
    {
        if (attachment.Type == AttachmentType.Document && !string.IsNullOrEmpty(attachment.StoragePath))
        {
            OnEvidenceClick.InvokeAsync(attachment.StoragePath);
        }
    }

    private async Task CopyMessage()
    {
        // TODO: Implement copy to clipboard
    }

    private async Task RegenerateMessage()
    {
        // TODO: Implement regenerate
    }

    private async Task EditMessage()
    {
        // TODO: Implement edit
    }

    private void ShowAllCitations()
    {
        // TODO: Show all citations modal
    }
}
