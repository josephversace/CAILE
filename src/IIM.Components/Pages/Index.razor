@page "/"
@using IIM.Components.Services
@using IIM.Core.Platform
@using IIM.Core.Services
@using IIM.Shared.Models
@inject IWslManager Wsl
@inject IimClient Iim

<div class="container py-4">
    <h3 class="mb-3">IIM Dashboard</h3>
    <div class="card mb-3">
        <div class="card-body">
            <div class="d-flex align-items-center justify-content-between">
                <div>
                    <div>Status: <strong>@statusText</strong></div>
                    <div>GPU Vendor: <strong>@gpu?.Vendor</strong></div>
                    <div>Provider: <strong>@gpu?.Provider</strong></div>
                    <div>VRAM: <strong>@gpu?.VramGb</strong> GB</div>
                </div>
                <div>
                    <button class="btn btn-primary me-2" @onclick="StartIim">Start</button>
                    <button class="btn btn-outline-secondary" @onclick="StopIim">Stop</button>
                </div>
            </div>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <h5>Quick Test</h5>
            <div class="input-group">
                <input class="form-control" @bind="prompt" />
                <button class="btn btn-success" @onclick="Generate">Generate</button>
            </div>
            <pre class="mt-3">@output</pre>
        </div>
    </div>
</div>

@code {
    private string statusText = "Checking...";
    private GpuInfo? gpu;
    private string prompt = "Summarize case notes.";
    private string output = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fixed: Now using async methods properly
            if (!await Wsl.IsWslEnabled())
            {
                await Wsl.EnableWsl();
            }

            if (!await Wsl.DistroExists("IIM-Ubuntu"))
            {
                // In production, prompt to install from Store or run a bundled installer
                statusText = "Distro not installed";
            }
            else
            {
                await Wsl.StartIim();
            }
        }
        catch (Exception ex)
        {
            statusText = $"Error: {ex.Message}";
        }

        var ok = await Iim.HealthAsync();
        statusText = ok ? "Running" : "Stopped";
        gpu = await Iim.GetGpuInfoAsync();
    }

    private async Task StartIim()
    {
        await Wsl.StartIim();
        await Task.Delay(1000);
        statusText = await Iim.HealthAsync() ? "Running" : "Stopped";
    }

    private async Task StopIim()
    {
        await Iim.StopAllAsync();
        statusText = "Stopped";
    }

    private async Task Generate()
    {
        var res = await Iim.GenerateAsync<string>("demo", prompt);
        output = res;
    }
}