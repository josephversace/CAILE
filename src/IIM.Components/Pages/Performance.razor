@page "/performance"
@using System.Text.Json
@using System.Timers
@inject HttpClient Http
@inject ILogger<Performance> Logger
@implements IDisposable

<div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3><i class="bi bi-speedometer2"></i> Performance Monitor</h3>
        <div>
            <span class="badge bg-info me-2">Auto-refresh: @(autoRefresh ? "ON" : "OFF")</span>
            <button class="btn btn-sm btn-outline-primary" @onclick="ToggleAutoRefresh">
                <i class="bi bi-arrow-repeat"></i> Toggle
            </button>
            <button class="btn btn-sm btn-primary ms-2" @onclick="RefreshStats" disabled="@isLoading">
                <i class="bi bi-arrow-clockwise"></i> Refresh Now
            </button>
        </div>
    </div>

    @if (isLoading && stats == null)
    {
        <div class="d-flex justify-content-center p-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <i class="bi bi-exclamation-triangle-fill"></i> @errorMessage
            <button type="button" class="btn-close float-end" @onclick="() => errorMessage = string.Empty"></button>
        </div>
    }

    @if (stats != null)
    {
        <!-- Memory Overview -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card border-0 shadow-sm">
                    <div class="card-header bg-gradient bg-primary text-white">
                        <h5 class="mb-0"><i class="bi bi-memory"></i> System Memory</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <div class="d-flex justify-content-between mb-1">
                                <span>Memory Usage</span>
                                <span class="fw-bold">@FormatBytes(stats.UsedMemory) /
                                    @FormatBytes(stats.TotalMemory)</span>
                            </div>
                            <div class="progress" style="height: 30px;">
                                <div class="progress-bar @GetMemoryBarClass(stats.MemoryPercentage)" role="progressbar"
                                    style="width: @stats.MemoryPercentage%">
                                    @stats.MemoryPercentage%
                                </div>
                            </div>
                        </div>

                        @if (stats.MemoryPercentage > 90)
                        {
                            <div class="alert alert-danger mb-0">
                                <i class="bi bi-exclamation-triangle"></i> Critical: Memory usage exceeds 90%. Models may be
                                evicted.
                            </div>
                        }
                        else if (stats.MemoryPercentage > 75)
                        {
                            <div class="alert alert-warning mb-0">
                                <i class="bi bi-info-circle"></i> Warning: High memory usage. Consider unloading unused models.
                            </div>
                        }

                        <div class="row mt-3">
                            <div class="col-md-3 col-6">
                                <div class="text-center">
                                    <h4 class="text-primary">@stats.LoadedModels</h4>
                                    <small class="text-muted">Models Loaded</small>
                                </div>
                            </div>
                            <div class="col-md-3 col-6">
                                <div class="text-center">
                                    <h4 class="text-success">@FormatBytes(stats.AvailableMemory)</h4>
                                    <small class="text-muted">Available</small>
                                </div>
                            </div>
                            <div class="col-md-3 col-6">
                                <div class="text-center">
                                    <h4 class="text-info">@stats.GpuSlotsAvailable/@stats.MaxGpuSlots</h4>
                                    <small class="text-muted">GPU Slots</small>
                                </div>
                            </div>
                            <div class="col-md-3 col-6">
                                <div class="text-center">
                                    <h4 class="text-info">@stats.CpuSlotsAvailable/@stats.MaxCpuSlots</h4>
                                    <small class="text-muted">CPU Slots</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Queue and Request Stats -->
        <div class="row mb-4">
            <div class="col-lg-6 mb-3 mb-lg-0">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="bi bi-stack"></i> Request Queue</h5>
                    </div>
                    <div class="card-body">
                        @foreach (var queue in stats.Queues)
                        {
                            <div class="mb-3">
                                <div class="d-flex justify-content-between align-items-center mb-1">
                                    <span class="badge bg-@queue.ColorClass">@queue.Name</span>
                                    <span>@queue.Count requests</span>
                                </div>
                                <div class="progress" style="height: 10px;">
                                    <div class="progress-bar bg-@queue.ColorClass"
                                        style="width: @Math.Min(queue.Count * 5, 100)%"></div>
                                </div>
                            </div>
                        }

                        <hr />

                        <div class="row text-center">
                            <div class="col-4">
                                <h5 class="mb-0">@stats.PendingRequests</h5>
                                <small class="text-muted">Pending</small>
                            </div>
                            <div class="col-4">
                                <h5 class="mb-0 text-success">@stats.CompletedRequests</h5>
                                <small class="text-muted">Completed</small>
                            </div>
                            <div class="col-4">
                                <h5 class="mb-0 text-danger">@stats.FailedRequests</h5>
                                <small class="text-muted">Failed</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-6">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-header">
                        <h5 class="mb-0"><i class="bi bi-graph-up"></i> Throughput</h5>
                    </div>
                    <div class="card-body">
                        <canvas id="throughputChart" height="150"></canvas>
                        <div class="mt-3 text-center">
                            <h4 class="text-primary">@stats.CurrentThroughput</h4>
                            <small class="text-muted">Requests/sec (current)</small>
                            <div class="mt-2">
                                <span class="badge bg-secondary">Avg: @stats.AverageThroughput req/s</span>
                                <span class="badge bg-success">Peak: @stats.PeakThroughput req/s</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Models Table -->
        <div class="card border-0 shadow-sm">
            <div class="card-header">
                <h5 class="mb-0"><i class="bi bi-cpu"></i> Loaded Models</h5>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Model</th>
                                <th>Type</th>
                                <th>Memory</th>
                                <th>Requests</th>
                                <th>Avg Latency</th>
                                <th>Throughput</th>
                                <th>Last Used</th>
                                <th class="text-center">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (stats.Models != null && stats.Models.Any())
                            {
                                @foreach (var model in stats.Models)
                                {
                                    <tr>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <i class="bi bi-@GetModelIcon(model.Type) me-2"></i>
                                                <span class="font-monospace">@model.Id</span>
                                            </div>
                                        </td>
                                        <td><span class="badge bg-secondary">@model.Type</span></td>
                                        <td>@FormatBytes(model.MemoryUsage)</td>
                                        <td>
                                            <span class="badge bg-info">@model.RequestCount</span>
                                            @if (model.ActiveRequests > 0)
                                            {
                                                <span class="badge bg-warning ms-1">@model.ActiveRequests active</span>
                                            }
                                        </td>
                                        <td>@model.AverageLatency ms</td>
                                        <td>@model.TokensPerSecond.ToString("F1") t/s</td>
                                        <td><small>@model.LastUsed</small></td>
                                        <td class="text-center">
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => UnloadModel(model.Id)"
                                                title="Unload model">
                                                <i class="bi bi-eject"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="8" class="text-center text-muted py-4">
                                        <i class="bi bi-inbox"></i> No models currently loaded
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private System.Timers.Timer? refreshTimer;
    private bool autoRefresh = true;
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private PerformanceStats? stats;

    protected override async Task OnInitializedAsync()
    {
        await RefreshStats();
        SetupAutoRefresh();
    }

    private void SetupAutoRefresh()
    {
        if (refreshTimer != null)
        {
            refreshTimer.Dispose();
        }

        if (autoRefresh)
        {
            refreshTimer = new System.Timers.Timer(5000); // 5 seconds
            refreshTimer.Elapsed += async (sender, e) => await InvokeAsync(async () =>
            {
                await RefreshStats();
                StateHasChanged();
            });
            refreshTimer.Start();
        }
    }

    private void ToggleAutoRefresh()
    {
        autoRefresh = !autoRefresh;
        SetupAutoRefresh();
    }

    private async Task RefreshStats()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            var response = await Http.GetAsync("http://localhost:5080/v1/stats");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                stats = ParseStats(json);
            }
            else
            {
                errorMessage = $"Failed to fetch stats: {response.StatusCode}";
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = "Cannot connect to API. Ensure the service is running.";
            Logger.LogError(ex, "Failed to connect to API");
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
            Logger.LogError(ex, "Failed to refresh stats");
        }
        finally
        {
            isLoading = false;
        }
    }

    private PerformanceStats ParseStats(string json)
    {
        var result = new PerformanceStats();

        try
        {
            using var doc = JsonDocument.Parse(json);
            var root = doc.RootElement;

            // Parse orchestrator stats
            if (root.TryGetProperty("orchestrator", out var orchestrator))
            {
                result.TotalMemory = 128L * 1024 * 1024 * 1024; // 128GB
                result.AvailableMemory = orchestrator.GetProperty("availableMemory").GetInt64();
                result.UsedMemory = result.TotalMemory - result.AvailableMemory;
                result.MemoryPercentage = (int)((double)result.UsedMemory / result.TotalMemory * 100);
                result.LoadedModels = orchestrator.GetProperty("loadedModels").GetInt32();

                if (orchestrator.TryGetProperty("models", out var models))
                {
                    result.Models = ParseModels(models);
                }
            }

            // Parse pipeline stats
            if (root.TryGetProperty("pipeline", out var pipeline))
            {
                result.TotalRequests = pipeline.GetProperty("totalRequests").GetInt64();
                result.CompletedRequests = pipeline.GetProperty("completedRequests").GetInt64();
                result.FailedRequests = pipeline.GetProperty("failedRequests").GetInt64();
                result.PendingRequests = pipeline.GetProperty("pendingRequests").GetInt32();

                result.GpuSlotsAvailable = pipeline.GetProperty("gpuSlotsAvailable").GetInt32();
                result.CpuSlotsAvailable = pipeline.GetProperty("cpuSlotsAvailable").GetInt32();
                result.MaxGpuSlots = 2;
                result.MaxCpuSlots = 4;

                // Parse queues
                result.Queues = new List<QueueInfo>
{
new QueueInfo
{
Name = "High Priority",
Count = pipeline.GetProperty("highPriorityQueueDepth").GetInt32(),
ColorClass = "danger"
},
new QueueInfo
{
Name = "Normal Priority",
Count = pipeline.GetProperty("normalPriorityQueueDepth").GetInt32(),
ColorClass = "warning"
},
new QueueInfo
{
Name = "Low Priority",
Count = pipeline.GetProperty("lowPriorityQueueDepth").GetInt32(),
ColorClass = "info"
}
};
            }

            // Calculate throughput (mock for now)
            result.CurrentThroughput = Random.Shared.Next(10, 50);
            result.AverageThroughput = 25;
            result.PeakThroughput = 48;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to parse stats JSON");
        }

        return result;
    }

    private List<ModelStats> ParseModels(JsonElement modelsElement)
    {
        var models = new List<ModelStats>();

        foreach (JsonProperty prop in modelsElement.EnumerateObject())
        {
            var model = prop.Value;
            models.Add(new ModelStats
            {
                Id = prop.Name,
                Type = model.GetProperty("type").GetString() ?? "Unknown",
                MemoryUsage = model.GetProperty("memoryUsage").GetInt64(),
                RequestCount = model.GetProperty("accessCount").GetInt32(),
                AverageLatency = (int)model.GetProperty("averageLatency").GetProperty("totalMilliseconds").GetDouble(),
                TokensPerSecond = model.TryGetProperty("averageTokensPerSecond", out var tps) ? tps.GetDouble() : 0,
                LastUsed = GetRelativeTime(model.GetProperty("lastAccessed").GetDateTime()),
                ActiveRequests = 0
            });
        }

        return models;
    }

    private async Task UnloadModel(string modelId)
    {
        try
        {
            var response = await Http.PostAsync($"http://localhost:5080/v1/models/{modelId}/unload", null);
            if (response.IsSuccessStatusCode)
            {
                await RefreshStats();
            }
            else
            {
                errorMessage = $"Failed to unload model: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error unloading model: {ex.Message}";
            Logger.LogError(ex, "Failed to unload model {ModelId}", modelId);
        }
    }

    private string FormatBytes(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        int order = 0;
        double size = bytes;

        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }

        return $"{size:F1} {sizes[order]}";
    }

    private string GetRelativeTime(DateTime time)
    {
        var diff = DateTime.UtcNow - time;

        if (diff.TotalSeconds < 60) return "just now";
        if (diff.TotalMinutes < 60) return $"{(int)diff.TotalMinutes}m ago";
        if (diff.TotalHours < 24) return $"{(int)diff.TotalHours}h ago";
        return $"{(int)diff.TotalDays}d ago";
    }

    private string GetMemoryBarClass(int percentage)
    {
        if (percentage > 90) return "bg-danger";
        if (percentage > 75) return "bg-warning";
        if (percentage > 50) return "bg-info";
        return "bg-success";
    }

    private string GetModelIcon(string type)
    {
        var lowerType = type?.ToLowerInvariant() ?? "";
        return lowerType switch
        {
            "llm" => "brain",
            "whisper" => "mic",
            "clip" => "image",
            "embedding" => "vector-pen",
            _ => "cpu"
        };
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }

    // Data models
    private class PerformanceStats
    {
        public long TotalMemory { get; set; }
        public long UsedMemory { get; set; }
        public long AvailableMemory { get; set; }
        public int MemoryPercentage { get; set; }
        public int LoadedModels { get; set; }

        public long TotalRequests { get; set; }
        public long CompletedRequests { get; set; }
        public long FailedRequests { get; set; }
        public int PendingRequests { get; set; }

        public int GpuSlotsAvailable { get; set; }
        public int CpuSlotsAvailable { get; set; }
        public int MaxGpuSlots { get; set; }
        public int MaxCpuSlots { get; set; }

        public int CurrentThroughput { get; set; }
        public int AverageThroughput { get; set; }
        public int PeakThroughput { get; set; }

        public List<QueueInfo> Queues { get; set; } = new();
        public List<ModelStats> Models { get; set; } = new();
    }

    private class QueueInfo
    {
        public string Name { get; set; } = "";
        public int Count { get; set; }
        public string ColorClass { get; set; } = "";
    }

    private class ModelStats
    {
        public string Id { get; set; } = "";
        public string Type { get; set; } = "";
        public long MemoryUsage { get; set; }
        public int RequestCount { get; set; }
        public int ActiveRequests { get; set; }
        public int AverageLatency { get; set; }
        public double TokensPerSecond { get; set; }
        public string LastUsed { get; set; } = "";
    }
}