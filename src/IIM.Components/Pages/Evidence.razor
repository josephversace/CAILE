@page "/evidence"
@using IIM.Core.Models
@using IIM.Core.Security
@using IIM.Core.Services
@using IIM.Shared.Enums
@using IIM.Shared.Models
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging
@inject IEvidenceManager EvidenceManager
@inject ILogger<Evidence> Logger
@inject IJSRuntime JS

<div class="container-fluid py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3><i class="bi bi-shield-check"></i> Evidence Management</h3>
        <button class="btn btn-primary" @onclick="ShowIngestModal">
            <i class="bi bi-plus-circle"></i> Ingest Evidence
        </button>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle-fill"></i> @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle-fill"></i> @successMessage
            <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
        </div>
    }

    <!-- Evidence List -->
    <div class="card border-0 shadow-sm">
        <div class="card-header">
            <div class="row">
                <div class="col-md-6">
                    <h5 class="mb-0"><i class="bi bi-folder2-open"></i> Evidence Items</h5>
                </div>
                <div class="col-md-6">
                    <input type="text" class="form-control" placeholder="Search by case number or file name..."
                           @bind="searchTerm" @bind:event="oninput" />
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>Evidence ID</th>
                            <th>File Name</th>
                            <th>Case #</th>
                            <th>Type</th>
                            <th>Status</th>
                            <th>Ingested</th>
                            <th>Size</th>
                            <th>Integrity</th>
                            <th>Chain</th>
                            <th class="text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (FilteredEvidence.Any())
                        {
                            @foreach (var item in FilteredEvidence)
                            {
                                <tr>
                                    <td>
                                        <code class="text-primary">@item.Id.Substring(0, 8)...</code>
                                    </td>
                                    <td>
                                        <i class="bi @GetFileIcon(item.Type)"></i>
                                        @item.OriginalFileName
                                    </td>
                                    <td>
                                        <span class="badge bg-secondary">@item.CaseNumber</span>
                                    </td>
                                    <td>
                                        <span class="badge bg-info">@item.Type</span>
                                    </td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(item.Status)">@item.Status</span>
                                    </td>
                                    <td>
                                        <small>@item.IngestTimestamp.ToString("yyyy-MM-dd HH:mm")</small>
                                    </td>
                                    <td>
                                        <small>@FormatFileSize(item.FileSize)</small>
                                    </td>
                                    <td>
                                        @if (item.IntegrityValid)
                                        {
                                            <span class="badge bg-success">
                                                <i class="bi bi-check-circle"></i> Valid
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger">
                                                <i class="bi bi-x-circle"></i> Invalid
                                            </span>
                                        }
                                    </td>
                                    <td>
                                        <span class="badge bg-info">@item.ChainOfCustody.Count entries</span>
                                    </td>
                                    <td class="text-center">
                                        <div class="btn-group btn-group-sm" role="group">
                                            <button class="btn btn-outline-primary"
                                                    @onclick="() => ViewEvidence(item)"
                                                    title="View details">
                                                <i class="bi bi-eye"></i>
                                            </button>
                                            <button class="btn btn-outline-success"
                                                    @onclick="() => VerifyIntegrity(item.Id)"
                                                    title="Verify integrity">
                                                <i class="bi bi-shield-check"></i>
                                            </button>
                                            <button class="btn btn-outline-info"
                                                    @onclick="() => ShowChainOfCustody(item.Id)"
                                                    title="Chain of custody">
                                                <i class="bi bi-link-45deg"></i>
                                            </button>
                                            <button class="btn btn-outline-warning"
                                                    @onclick="() => ExportEvidence(item.Id)"
                                                    title="Export">
                                                <i class="bi bi-download"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="10" class="text-center text-muted py-4">
                                    <i class="bi bi-inbox fs-1"></i>
                                    <p>No evidence items found</p>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Ingest Modal -->
    @if (showIngestModal)
    {
        <div class="modal show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="bi bi-upload"></i> Ingest Evidence
                        </h5>
                        <button type="button" class="btn-close" @onclick="() => showIngestModal = false"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Case Number *</label>
                            <input type="text" class="form-control" @bind="ingestMetadata.CaseNumber" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Collected By *</label>
                            <input type="text" class="form-control" @bind="ingestMetadata.CollectedBy" />
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Collection Date</label>
                                    <input type="datetime-local" class="form-control"
                                           value="@ingestMetadata.CollectionDate.ToString("yyyy-MM-ddTHH:mm")"
                                           @onchange="@((ChangeEventArgs e) => ingestMetadata.CollectionDate = DateTimeOffset.Parse(e.Value?.ToString() ?? DateTimeOffset.Now.ToString()))" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Collection Location</label>
                                    <input type="text" class="form-control"
                                           @bind="ingestMetadata.CollectionLocation" />
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Device Source</label>
                            <input type="text" class="form-control"
                                   @bind="ingestMetadata.DeviceSource"
                                   placeholder="e.g., iPhone 13, Samsung Galaxy S21" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" rows="3"
                                      @bind="ingestMetadata.Description"></textarea>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Evidence File *</label>
                            <InputFile OnChange="OnFileSelected" class="form-control" />
                            @if (selectedFile != null)
                            {
                                <div class="mt-2">
                                    <small class="text-muted">
                                        Selected: @selectedFile.Name (@FormatFileSize(selectedFile.Size))
                                    </small>
                                </div>
                            }
                        </div>

                        <div class="alert alert-info">
                            <i class="bi bi-info-circle"></i>
                            The file will be hashed using SHA256, SHA512, and MD5 algorithms.
                            A digital signature will be applied to ensure integrity.
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary"
                                @onclick="() => showIngestModal = false">
                            Cancel
                        </button>
                        <button type="button" class="btn btn-primary"
                                @onclick="IngestEvidence"
                                disabled="@(isProcessing || selectedFile == null || string.IsNullOrEmpty(ingestMetadata.CaseNumber))">
                            @if (isProcessing)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            <i class="bi bi-upload"></i> Ingest Evidence
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Chain of Custody Modal -->
    @if (showChainModal && currentChainReport != null)
    {
        <div class="modal show d-block" tabindex="-1" style="background: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="bi bi-link-45deg"></i> Chain of Custody Report
                        </h5>
                        <button type="button" class="btn-close" @onclick="() => showChainModal = false"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <strong>Evidence ID:</strong> <code>@currentChainReport.EvidenceId</code><br />
                                <strong>Original File:</strong> @currentChainReport.OriginalFileName<br />
                                <strong>Case Number:</strong> @currentChainReport.CaseNumber<br />
                                <strong>Machine ID:</strong> @currentChainReport.MachineIdentifier
                            </div>
                            <div class="col-md-6">
                                <strong>Ingested:</strong> @currentChainReport.IngestTimestamp.ToString("yyyy-MM-dd HH:mm:ss")<br />
                                <strong>Generated:</strong> @currentChainReport.GeneratedAt.ToString("yyyy-MM-dd HH:mm:ss")<br />
                                <strong>Generated By:</strong> @currentChainReport.GeneratedBy<br />
                                <strong>Integrity:</strong>
                                @if (currentChainReport.IntegrityValid)
                                {
                                    <span class="badge bg-success">Valid</span>
                                }
                                else
                                {
                                    <span class="badge bg-danger">Compromised</span>
                                }
                            </div>
                        </div>

                        <h6>Original Hashes</h6>
                        <div class="mb-3">
                            <table class="table table-sm">
                                @foreach (var hash in currentChainReport.OriginalHashes)
                                {
                                    <tr>
                                        <td width="100"><strong>@hash.Key:</strong></td>
                                        <td><code class="text-break">@hash.Value</code></td>
                                    </tr>
                                }
                            </table>
                        </div>

                        <h6>Chain of Custody Entries</h6>
                        <div class="table-responsive">
                            <table class="table table-sm table-striped">
                                <thead>
                                    <tr>
                                        <th>Timestamp</th>
                                        <th>Action</th>
                                        <th>Actor</th>
                                        <th>Officer</th>
                                        <th>Details</th>
                                        <th>Hash</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var entry in currentChainReport.ChainEntries)
                                    {
                                        <tr>
                                            <td>@entry.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                            <td><span class="badge bg-info">@entry.Action</span></td>
                                            <td>@entry.Actor</td>
                                            <td>@entry.Officer</td>
                                            <td>@entry.Details</td>
                                            <td><code>@(entry.Hash?.Length > 16 ? entry.Hash.Substring(0, 16) + "..." : entry.Hash)</code></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        @if (currentChainReport.ProcessedVersions.Any())
                        {
                            <h6 class="mt-3">Processed Versions</h6>
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>Type</th>
                                            <th>Processed By</th>
                                            <th>Timestamp</th>
                                            <th>Hash</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var processed in currentChainReport.ProcessedVersions)
                                        {
                                            <tr>
                                                <td><code>@processed.Id.Substring(0, 8)...</code></td>
                                                <td>@processed.ProcessingType</td>
                                                <td>@processed.ProcessedBy</td>
                                                <td>@processed.ProcessedTimestamp.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                                <td><code>@(processed.ProcessedHash?.Length > 16 ? processed.ProcessedHash.Substring(0, 16) + "..." : processed.ProcessedHash)</code></td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }

                        @if (currentChainReport.AuditLog.Any())
                        {
                            <h6 class="mt-3">Audit Log</h6>
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Timestamp</th>
                                            <th>Event</th>
                                            <th>User</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var audit in currentChainReport.AuditLog)
                                        {
                                            <tr>
                                                <td>@audit.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                                <td>@audit.Event</td>
                                                <td>@audit.User</td>
                                                <td>@audit.Action</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }

                        <div class="mt-3">
                            <strong>Digital Signature:</strong><br />
                            <code class="text-break" style="font-size: 0.8em;">@currentChainReport.Signature</code>
                        </div>

                        @if (!string.IsNullOrEmpty(currentChainReport.PublicKey))
                        {
                            <div class="mt-2">
                                <strong>Public Key:</strong><br />
                                <code class="text-break" style="font-size: 0.8em;">@currentChainReport.PublicKey</code>
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary"
                                @onclick="() => showChainModal = false">
                            Close
                        </button>
                        <button type="button" class="btn btn-primary"
                                @onclick="() => DownloadChainReport(currentChainReport)">
                            <i class="bi bi-download"></i> Download Report
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<IIM.Shared.Models.Evidence> evidenceItems = new();
    private string searchTerm = string.Empty;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isProcessing = false;

    // Ingest modal
    private bool showIngestModal = false;
    private IBrowserFile? selectedFile;
    private EvidenceMetadata ingestMetadata = new();

    // Chain of custody modal
    private bool showChainModal = false;
    private ChainOfCustodyReport? currentChainReport;

    private IEnumerable<IIM.Shared.Models.Evidence> FilteredEvidence =>
        string.IsNullOrWhiteSpace(searchTerm)
            ? evidenceItems
            : evidenceItems.Where(e =>
                e.CaseNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                e.OriginalFileName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnInitializedAsync()
    {
        await LoadEvidence();
    }

    private async Task LoadEvidence()
    {
        try
        {
            // Load all evidence for display
            // In production, this would be paginated
            var cases = new[] { "2024-CF-1234", "2024-CF-1235" };

            foreach (var caseNumber in cases)
            {
                var caseEvidence = await EvidenceManager.GetEvidenceByCaseAsync(caseNumber);
                evidenceItems.AddRange(caseEvidence);
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load evidence: {ex.Message}";
            Logger.LogError(ex, "Failed to load evidence");
        }
    }

    private void ShowIngestModal()
    {
        showIngestModal = true;
        ingestMetadata = new EvidenceMetadata
        {
            CollectionDate = DateTimeOffset.Now,
            CollectedBy = Environment.UserName
        };
    }

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task IngestEvidence()
    {
        if (selectedFile == null || string.IsNullOrEmpty(ingestMetadata.CaseNumber))
            return;

        try
        {
            isProcessing = true;
            errorMessage = string.Empty;

            // Read file into stream
            using var stream = selectedFile.OpenReadStream(maxAllowedSize: 10L * 1024 * 1024 * 1024); // 10GB max
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            memoryStream.Position = 0;

            // Ingest evidence
            var evidence = await EvidenceManager.IngestEvidenceAsync(
                memoryStream,
                selectedFile.Name,
                ingestMetadata);

            evidenceItems.Add(evidence);

            successMessage = $"Evidence '{selectedFile.Name}' ingested successfully with ID: {evidence.Id.Substring(0, 8)}...";
            showIngestModal = false;
            selectedFile = null;
            ingestMetadata = new();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to ingest evidence: {ex.Message}";
            Logger.LogError(ex, "Failed to ingest evidence");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task VerifyIntegrity(string evidenceId)
    {
        try
        {
            isProcessing = true;
            var isValid = await EvidenceManager.VerifyIntegrityAsync(evidenceId);

            // Update local state
            var evidence = evidenceItems.FirstOrDefault(e => e.Id == evidenceId);
            if (evidence != null)
            {
                evidence.IntegrityValid = isValid;
            }

            if (isValid)
            {
                successMessage = "Integrity verification completed: VALID";
            }
            else
            {
                errorMessage = "Integrity verification failed: COMPROMISED";
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Integrity verification failed: {ex.Message}";
            Logger.LogError(ex, "Integrity verification failed");
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task ShowChainOfCustody(string evidenceId)
    {
        try
        {
            currentChainReport = await EvidenceManager.GenerateChainOfCustodyAsync(evidenceId);
            showChainModal = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load chain of custody: {ex.Message}";
            Logger.LogError(ex, "Failed to load chain of custody");
        }
    }

    private async Task ExportEvidence(string evidenceId)
    {
        try
        {
            // In production, let user choose export path
            var exportPath = Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.Desktop),
                $"Evidence_Export_{DateTime.Now:yyyyMMdd_HHmmss}");

            var export = await EvidenceManager.ExportEvidenceAsync(evidenceId, exportPath);

            successMessage = $"Evidence exported successfully to: {export.ExportPath}";

            // In production, could trigger download or open folder
            await JS.InvokeVoidAsync("alert", $"Evidence exported to:\n{export.ExportPath}\n\nFiles:\n{string.Join("\n", export.Files.Select(f => Path.GetFileName(f)))}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Export failed: {ex.Message}";
            Logger.LogError(ex, "Export failed");
        }
    }

    private async Task DownloadChainReport(ChainOfCustodyReport report)
    {
        try
        {
            // In production, generate PDF or formatted report
            var json = System.Text.Json.JsonSerializer.Serialize(report, new System.Text.Json.JsonSerializerOptions
            {
                WriteIndented = true
            });

            // Trigger browser download
            var fileName = $"ChainOfCustody_{report.EvidenceId}_{DateTime.Now:yyyyMMdd_HHmmss}.json";
            await JS.InvokeVoidAsync("downloadFileFromText", fileName, json, "application/json");
        }
        catch (Exception ex)
        {
            errorMessage = $"Download failed: {ex.Message}";
            Logger.LogError(ex, "Download failed");
        }
    }

    private void ViewEvidence(IIM.Shared.Models.Evidence item)
    {
        // Navigate to detailed view or show in modal
        // For now, show chain of custody
        ShowChainOfCustody(item.Id);
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        int order = 0;
        double size = bytes;

        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }

        return $"{size:F2} {sizes[order]}";
    }

    private string GetFileIcon(EvidenceType type)
    {
        return type switch
        {
            EvidenceType.Document => "bi-file-earmark-text",
            EvidenceType.Image => "bi-file-earmark-image",
            EvidenceType.Video => "bi-file-earmark-play",
            EvidenceType.Audio => "bi-file-earmark-music",
            EvidenceType.Email => "bi-envelope",
            EvidenceType.Database => "bi-database",
            EvidenceType.DiskImage => "bi-device-hdd",
            EvidenceType.MemoryDump => "bi-memory",
            EvidenceType.NetworkCapture => "bi-ethernet",
            EvidenceType.LogFile => "bi-file-earmark-code",
            EvidenceType.Archive => "bi-file-earmark-zip",
            _ => "bi-file-earmark"
        };
    }

    private string GetStatusBadgeClass(EvidenceStatus status)
    {
        return status switch
        {
            EvidenceStatus.Pending => "bg-warning",
            EvidenceStatus.Ingested => "bg-info",
            EvidenceStatus.Processing => "bg-primary",
            EvidenceStatus.Analyzed => "bg-success",
            EvidenceStatus.Verified => "bg-success",
            EvidenceStatus.Compromised => "bg-danger",
            EvidenceStatus.Archived => "bg-secondary",
            _ => "bg-secondary"
        };
    }
}

@* Add this JavaScript for download functionality *@
<script>
    window.downloadFileFromText = (filename, text, type) => {
        const blob = new Blob([text], { type: type });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
    };
</script>