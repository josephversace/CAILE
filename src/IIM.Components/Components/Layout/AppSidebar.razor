@namespace IIM.Components.Components.Layout
@using IIM.Core.Models

<div class="iim-sidebar @(IsCollapsed ? "collapsed" : "")" id="appSidebar">
    <!-- Sidebar Tabs -->
    <div class="iim-sidebar-tabs">
        <button class="iim-sidebar-tab @(_activeTab == "sessions" ? "active" : "")"
                @onclick="@(() => SetActiveTab("sessions"))">
            <i class="fas fa-folder"></i>
            @if (!IsCollapsed)
            {
                <span>Sessions</span>
            }
        </button>
        <button class="iim-sidebar-tab @(_activeTab == "tools" ? "active" : "")"
                @onclick="@(() => SetActiveTab("tools"))">
            <i class="fas fa-tools"></i>
            @if (!IsCollapsed)
            {
                <span>Tools</span>
            }
        </button>
    </div>

    <!-- Sidebar Content -->
    <div class="iim-sidebar-content">
        @if (_activeTab == "sessions")
        {
            <!-- New Session Button -->
            <button class="btn btn-primary w-100 mb-3" @onclick="@CreateNewSession">
                <i class="fas fa-plus me-2"></i>
                @if (!IsCollapsed)
                {
                    <span>New Investigation</span>
                }
            </button>

            <!-- Session Groups -->
            <div class="session-groups">
                <!-- Today's Sessions -->
                @if (_todaySessions.Any())
                {
                    <div class="session-group">
                        @if (!IsCollapsed)
                        {
                            <div class="session-group-title">TODAY</div>
                        }
                        @foreach (var session in _todaySessions)
                        {
                            <SessionItem Session="@session"
                                         IsActive="@(session.Id == _activeSessionId)"
                                         IsCollapsed="@IsCollapsed"
                                         OnClick="@(() => SelectSession(session.Id))" />
                        }
                    </div>
                }

                <!-- Yesterday's Sessions -->
                @if (_yesterdaySessions.Any())
                {
                    <div class="session-group">
                        @if (!IsCollapsed)
                        {
                            <div class="session-group-title">YESTERDAY</div>
                        }
                        @foreach (var session in _yesterdaySessions)
                        {
                            <SessionItem Session="@session"
                                         IsActive="@(session.Id == _activeSessionId)"
                                         IsCollapsed="@IsCollapsed"
                                         OnClick="@(() => SelectSession(session.Id))" />
                        }
                    </div>
                }

                <!-- Older Sessions -->
                @if (_olderSessions.Any())
                {
                    <div class="session-group">
                        @if (!IsCollapsed)
                        {
                            <div class="session-group-title">OLDER</div>
                        }
                        @foreach (var session in _olderSessions)
                        {
                            <SessionItem Session="@session"
                                         IsActive="@(session.Id == _activeSessionId)"
                                         IsCollapsed="@IsCollapsed"
                                         OnClick="@(() => SelectSession(session.Id))" />
                        }
                    </div>
                }
            </div>
        }
        else if (_activeTab == "tools")
        {
            <!-- Quick Tools -->
            <div class="quick-tools">
                @if (!IsCollapsed)
                {
                    <div class="session-group-title">QUICK TOOLS</div>
                }

                <button class="tool-button w-100 mb-2" @onclick="@OpenOCRTool">
                    <i class="fas fa-file-image"></i>
                    @if (!IsCollapsed)
                    {
                        <span>OCR Extraction</span>
                    }
                </button>

                <button class="tool-button w-100 mb-2" @onclick="@OpenAudioTool">
                    <i class="fas fa-microphone"></i>
                    @if (!IsCollapsed)
                    {
                        <span>Audio Transcription</span>
                    }
                </button>

                <button class="tool-button w-100 mb-2" @onclick="@OpenHashTool">
                    <i class="fas fa-fingerprint"></i>
                    @if (!IsCollapsed)
                    {
                        <span>Hash Calculator</span>
                    }
                </button>

                <button class="tool-button w-100 mb-2" @onclick="@OpenMetadataTool">
                    <i class="fas fa-info-circle"></i>
                    @if (!IsCollapsed)
                    {
                        <span>Metadata Viewer</span>
                    }
                </button>
            </div>
        }
    </div>

    <!-- Sidebar Footer -->
    @if (!IsCollapsed)
    {
        <div class="iim-sidebar-footer">
            <div class="storage-indicator">
                <i class="fas fa-database me-2"></i>
                <span>@_storageUsed GB / @_storageTotal GB</span>
                <div class="progress mt-1">
                    <div class="progress-bar" style="width: @(_storagePercent)%"></div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    // Input Parameters
    [Parameter] public bool IsCollapsed { get; set; }

    // EventCallback Parameters (proper way to handle events)
    [Parameter] public EventCallback<string> OnSessionSelected { get; set; }
    [Parameter] public EventCallback OnNewSession { get; set; }
    [Parameter] public EventCallback<string> OnToolSelected { get; set; }

    // Internal state - using InvestigationSession from IIM.Core.Models
    private string _activeTab = "sessions";
    private string _activeSessionId = "";
    private List<InvestigationSession> _todaySessions = new();
    private List<InvestigationSession> _yesterdaySessions = new();
    private List<InvestigationSession> _olderSessions = new();
    private double _storageUsed = 12.4;
    private double _storageTotal = 100;
    private int _storagePercent => (int)((_storageUsed / _storageTotal) * 100);

    protected override async Task OnInitializedAsync()
    {
        await LoadSessions();
    }

    private async Task LoadSessions()
    {
        // TODO: Load from service
        // Simulated data for now
        _todaySessions = new List<InvestigationSession>
        {
            new() { Id = "1", Title = "Financial Fraud Case #2847", Icon = "fa-university", CreatedAt = DateTime.Now.AddHours(-1) },
            new() { Id = "2", Title = "CSAM Investigation", Icon = "fa-shield-alt", CreatedAt = DateTime.Now.AddHours(-3) }
        };

        _yesterdaySessions = new List<InvestigationSession>
        {
            new() { Id = "3", Title = "Money Laundering Analysis", Icon = "fa-money-bill-wave", CreatedAt = DateTime.Now.AddDays(-1)}
        };

        _olderSessions = new List<InvestigationSession>
        {
            new() { Id = "4", Title = "Identity Theft Case", Icon = "fa-user-secret", CreatedAt = DateTime.Now.AddDays(-5) },
            new() { Id = "5", Title = "Cyber Attack Evidence", Icon = "fa-bug", CreatedAt = DateTime.Now.AddDays(-7)}
        };
    }

    private void SetActiveTab(string tab)
    {
        _activeTab = tab;
    }

    private async Task CreateNewSession()
    {
        // Invoke the EventCallback - this is the proper way
        await OnNewSession.InvokeAsync();
    }

    private async Task SelectSession(string sessionId)
    {
        _activeSessionId = sessionId;
        // Invoke the EventCallback with parameter
        await OnSessionSelected.InvokeAsync(sessionId);
    }

    private async Task OpenOCRTool()
    {
        await OnToolSelected.InvokeAsync("ocr");
    }

    private async Task OpenAudioTool()
    {
        await OnToolSelected.InvokeAsync("audio");
    }

    private async Task OpenHashTool()
    {
        await OnToolSelected.InvokeAsync("hash");
    }

    private async Task OpenMetadataTool()
    {
        await OnToolSelected.InvokeAsync("metadata");
    }

    // TODO: Add to IIM.Core.Models:
    // - SessionModel (or use existing InvestigationSession if it exists)
    // Properties needed: Id, Title, Icon, Time, MessageCount
    //
    // For now using temporary type - REPLACE with:
    // using IIM.Core.Models;
}

@* Component-specific styles if needed *@
<style>
    .tool-button {
        padding: 10px;
        background: white;
        border: 1px solid var(--iim-border);
        border-radius: 8px;
        color: var(--iim-text-primary);
        font-size: 13px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .tool-button:hover {
            background: var(--iim-primary);
            color: white;
            border-color: var(--iim-primary);
        }

    .iim-sidebar-footer {
        padding: 16px;
        border-top: 1px solid var(--iim-border);
        margin-top: auto;
    }

    .storage-indicator {
        font-size: 12px;
        color: var(--iim-text-secondary);
    }

    .progress {
        height: 4px;
        background: var(--iim-border);
        border-radius: 2px;
        overflow: hidden;
    }

    .progress-bar {
        height: 100%;
        background: var(--iim-primary);
        transition: width 0.3s;
    }
</style>