
@using IIM.Core.Models
@using IIM.Components.Services
@using IIM.Core.RAG
@using IIM.Core.Services
@using IIM.Infrastructure.Platform
@using IIM.Shared.Interfaces
@inject IModelManagementService ModelService
@inject IWslManager WslManager
@inject IQdrantService QdrantService
@implements IDisposable

<div class="status-bar">
    <div class="status-item">
        <div class="status-indicator @(SystemStatus == "operational" ? "success" : "warning")"></div>
        <span>@SystemStatusMessage</span>
    </div>

    <div class="status-item">
        <i class="fas fa-microchip"></i>
        <span>GPU: @GpuUsagePercent% | @FormatBytes(GpuMemoryUsed)</span>
    </div>

    <div class="status-item">
        <i class="fas fa-memory"></i>
        <span>RAM: @RamUsagePercent% | @FormatBytes(RamUsed)</span>
    </div>

    <div class="status-item">
        <i class="fas fa-database"></i>
        <span>Qdrant: @QdrantStatus</span>
    </div>

    @if (IsSecureMode)
    {
        <div class="status-item">
            <i class="fas fa-shield-alt"></i>
            <span>Secure Mode: ON</span>
        </div>
    }

    <div class="status-item" style="margin-left: auto;">
        <i class="fas fa-clock"></i>
        <span>@CurrentTime</span>
    </div>
</div>

@code {
    private Timer? _refreshTimer;
    private string SystemStatus = "checking";
    private string SystemStatusMessage = "Checking systems...";
    private int GpuUsagePercent = 0;
    private long GpuMemoryUsed = 0;
    private int RamUsagePercent = 0;
    private long RamUsed = 0;
    private string QdrantStatus = "Connecting...";
    private bool IsSecureMode = false;
    private string CurrentTime = DateTime.Now.ToString("HH:mm");

    protected override async Task OnInitializedAsync()
    {
        await RefreshStatus();
        _refreshTimer = new Timer(async _ => await RefreshStatus(), null, TimeSpan.Zero, TimeSpan.FromSeconds(5));
    }

    private async Task RefreshStatus()
    {
        try
        {
            // Get GPU stats
            var gpuStats = await ModelService.GetGpuStatsAsync();
            GpuUsagePercent = (int)((gpuStats.UsedMemory / (double)gpuStats.TotalMemory) * 100);
            GpuMemoryUsed = gpuStats.UsedMemory;

            // Get RAM stats
            var memInfo = GC.GetTotalMemory(false);
            RamUsagePercent = (int)((memInfo / (double)(128L * 1024 * 1024 * 1024)) * 100);
            RamUsed = memInfo;

            // Check Qdrant
            var qdrantHealthy = await QdrantService.IsHealthyAsync();
            QdrantStatus = qdrantHealthy ? "Connected" : "Disconnected";

            // Overall status
            SystemStatus = (qdrantHealthy && GpuUsagePercent < 90 && RamUsagePercent < 90) ? "operational" : "degraded";
            SystemStatusMessage = SystemStatus == "operational" ? "All Systems Operational" : "System Degraded";

            // Update time
            CurrentTime = DateTime.Now.ToString("HH:mm");

            await InvokeAsync(StateHasChanged);
        }
        catch
        {
            SystemStatus = "error";
            SystemStatusMessage = "System Error";
        }
    }

    private string FormatBytes(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        int order = 0;
        double size = bytes;

        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }

        return $"{size:F1} {sizes[order]}";
    }

    public void Dispose()
    {
        _refreshTimer?.Dispose();
    }
}
