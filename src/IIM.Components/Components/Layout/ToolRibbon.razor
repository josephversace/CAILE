@using IIM.Core.Models
@inject NavigationManager Navigation

<div class="tool-ribbon">
    <div class="tool-group">
        <ToolButton Icon="fa-comments" Label="Chat" IsActive="@(ActiveTool == "chat")"
            OnClick="@(() => SelectTool("chat"))" />

        <ToolButton Icon="fa-search" Label="RAG Search" IsActive="@(ActiveTool == "rag")"
            OnClick="@(() => SelectTool("rag"))" />
    </div>

    <div class="tool-group">
        <ToolButton Icon="fa-cube" Label="Models" OnClick="@ShowModelLibrary" />

        <ToolButton Icon="fa-sliders-h" Label="Fine-tune" OnClick="@ShowFineTuning" />
    </div>

    <div class="tool-group">
        <ToolButton Icon="fa-microphone" Label="Transcribe" IsActive="@(ActiveTool == "transcribe")"
            OnClick="@(() => SelectTool("transcribe"))" />

        <ToolButton Icon="fa-image" Label="Analyze Image" IsActive="@(ActiveTool == "image")"
            OnClick="@(() => SelectTool("image"))" />

        <ToolButton Icon="fa-file-alt" Label="OCR" IsActive="@(ActiveTool == "ocr")"
            OnClick="@(() => SelectTool("ocr"))" />
    </div>

    <div class="tool-group">
        <ToolButton Icon="fa-globe" Label="OSINT" IsActive="@(ActiveTool == "osint")"
            OnClick="@(() => SelectTool("osint"))" />

        <ToolButton Icon="fa-project-diagram" Label="Timeline" IsActive="@(ActiveTool == "timeline")"
            OnClick="@(() => SelectTool("timeline"))" />

        <ToolButton Icon="fa-chart-bar" Label="Report" IsActive="@(ActiveTool == "report")"
            OnClick="@(() => SelectTool("report"))" />
    </div>

    @if (CustomTools != null && CustomTools.Any())
    {
        <div class="tool-group">
            @foreach (var tool in CustomTools)
            {
                <ToolButton Icon="@tool.Icon" Label="@tool.Label" IsActive="@(ActiveTool == tool.Id)"
                    OnClick="@(() => SelectTool(tool.Id))" />
            }
        </div>
    }
</div>

@code {
    [Parameter] public string? ActiveTool { get; set; }
    [Parameter] public EventCallback<string> OnToolSelected { get; set; }
    [Parameter] public List<CustomTool>? CustomTools { get; set; }

    private async Task SelectTool(string toolId)
    {
        ActiveTool = toolId;
        await OnToolSelected.InvokeAsync(toolId);
    }

    private void ShowModelLibrary()
    {
        Navigation.NavigateTo("/models");
    }

    private void ShowFineTuning()
    {
        Navigation.NavigateTo("/fine-tuning");
    }

    public class CustomTool
    {
        public string Id { get; set; } = "";
        public string Label { get; set; } = "";
        public string Icon { get; set; } = "";
    }
}

    <style>
    .tool-ribbon {
        display: flex;
        flex-wrap: wrap; /* allows wrapping to multiple rows if needed */
        gap: 0.5rem 2rem; /* row gap, col gap between groups */
        align-items: flex-start; /* aligns tool-groups at top if there's more than one row */
        padding: 0.5rem 0;
    }

    .tool-group {
        display: flex;
        flex-wrap: wrap; /* if too many buttons in a group, they’ll wrap within the group */
        gap: 0.5rem;
    }

        .tool-group > * {
            /* Ensures buttons never squish smaller than their content */
            min-width: 0;
        }

</style>