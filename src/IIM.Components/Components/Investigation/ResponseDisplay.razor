@namespace IIM.Components.Components.Response
@using IIM.Components.Components.Chat
@using IIM.Core.Models
@using IIM.Shared.DTOs

<div class="card response-display @GetThemeClass()" data-response-id="@Response.Id">
    <!-- Align with existing InvestigationMessage display pattern -->
    <div class="card-header d-flex justify-content-between align-items-center">
        <div class="d-flex align-items-center gap-3">
            <h6 class="mb-0">
                <i class="fas @GetResponseIcon()"></i>
                @GetResponseTitle()
            </h6>
            @if (Response.Confidence.HasValue)
            {
                <ConfidenceIndicator Confidence="@Response.Confidence.Value" />
            }
        </div>
        
        <div class="d-flex align-items-center gap-2">
            <ResponseActions Response="@Response" 
                           OnExport="@OnExport"
                           OnAnnotate="@OnAnnotate" />
        </div>
    </div>
    
    <div class="card-body">
        @switch (DetermineDisplayType())
        {
            case ResponseDisplayType.Text:
                <TextResponseDisplay Message="@Message" Response="@Response" />
                break;
                
            case ResponseDisplayType.Table:
                <TableResponseDisplay Response="@Response" />
                break;
                
            case ResponseDisplayType.Image:
                <ImageResponseDisplay Response="@Response" />
                break;
                
            case ResponseDisplayType.Timeline:
                <TimelineResponseDisplay Response="@Response" />
                break;
                
            case ResponseDisplayType.MultiModal:
                <MultiModalResponseDisplay Response="@Response" />
                break;
                
            default:
                <StructuredDataDisplay Response="@Response" />
                break;
        }
        
        <!-- Tool Results (existing pattern) -->
        @if (Message?.ToolResults?.Any() == true)
        {
            <div class="tool-results mt-3">
                @foreach (var result in Message.ToolResults)
                {
                    <ToolResult Result="@result"
                                OnExecute="@((Dictionary<string, object> p) => OnToolExecute.InvokeAsync((result.ToolName, p)))" />
                }
            </div>
        }
        
        <!-- Citations (existing pattern) -->
        @if (Message?.Citations?.Any() == true)
        {
            <div class="citations mt-3">
                @foreach (var citation in Message.Citations)
                {
                    <CitationViewer Citation="@citation" 
                                  OnClick="@(() => OnCitationClick.InvokeAsync(citation))" />
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public IIM.Core.Models.InvestigationMessage? Message { get; set; }
    [Parameter] public InvestigationResponse Response { get; set; } = new();
    [Parameter] public EventCallback<ExportResponseRequest> OnExport { get; set; }
    [Parameter] public EventCallback<InvestigationResponse> OnAnnotate { get; set; }
    [Parameter] public EventCallback<(string tool, Dictionary<string, object> parameters)> OnToolExecute { get; set; }
    [Parameter] public EventCallback<Citation> OnCitationClick { get; set; }
    
    private ResponseDisplayType DetermineDisplayType()
    {
        if (Response.DisplayType != ResponseDisplayType.Auto)
            return Response.DisplayType;
            
        // Auto-detect based on content
        if (Response.Visualization != null)
        {
            return Response.Visualization.Type.ToLower() switch
            {
                "table" => ResponseDisplayType.Table,
                "image" => ResponseDisplayType.Image,
                "timeline" => ResponseDisplayType.Timeline,
                "map" => ResponseDisplayType.Geospatial,
                _ => ResponseDisplayType.Structured
            };
        }
        
        // Check tool results for type hints
        if (Message?.ToolResults?.Any() == true)
        {
            var firstResult = Message.ToolResults.First();
            if (firstResult.PreferredDisplayType.HasValue)
                return firstResult.PreferredDisplayType.Value;
        }
        
        return ResponseDisplayType.Text;
    }
    
    private string GetResponseTitle()
    {
        if (!string.IsNullOrEmpty(Response.Visualization?.Title))
            return Response.Visualization.Title;
            
        return DetermineDisplayType() switch
        {
            ResponseDisplayType.Table => "Data Analysis",
            ResponseDisplayType.Image => "Visual Analysis",
            ResponseDisplayType.Timeline => "Timeline View",
            ResponseDisplayType.Geospatial => "Location Analysis",
            _ => "Investigation Result"
        };
    }
    
    private string GetResponseIcon()
    {
        return DetermineDisplayType() switch
        {
            ResponseDisplayType.Text => "fa-file-alt",
            ResponseDisplayType.Table => "fa-table",
            ResponseDisplayType.Image => "fa-image",
            ResponseDisplayType.Timeline => "fa-clock",
            ResponseDisplayType.Geospatial => "fa-map-marked-alt",
            ResponseDisplayType.MultiModal => "fa-layer-group",
            _ => "fa-cube"
        };
    }
    
    private string GetThemeClass()
    {
        // Align with HUD theme classes
        return "border-0 shadow-sm";
    }
}