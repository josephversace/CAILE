// ============================================
// CREATE: src/IIM.Desktop/Components/Settings/SettingsPanel.razor
// UI for configuration management
// ============================================

@page "/settings"
@using IIM.Shared.Interfaces
@inject IIIMApiClient ApiClient
@inject INotificationService Notifications

<div class="settings-panel">
    <h2>System Settings</h2>

    <div class="settings-tabs">
        <ul class="nav nav-tabs">
            <li class="nav-item">
                <a class="nav-link @(ActiveTab == "storage" ? "active" : "")"
                   @onclick='() => ActiveTab = "storage"'>Storage</a>
            </li>
            <li class="nav-item">
                <a class="nav-link @(ActiveTab == "ai" ? "active" : "")"
                   @onclick='() => ActiveTab = "ai"'>AI Models</a>
            </li>
            <li class="nav-item">
                <a class="nav-link @(ActiveTab == "security" ? "active" : "")"
                   @onclick='() => ActiveTab = "security"'>Security</a>
            </li>
        </ul>
    </div>

    @if (ActiveTab == "storage")
    {
        <div class="settings-section">
            <h3>MinIO Configuration</h3>

            <div class="form-group">
                <label>MinIO Endpoint</label>
                <input type="text" @bind="Settings.MinIOEndpoint" class="form-control" />
                <small>Example: localhost:9000 or minio.agency.gov:9000</small>
            </div>

            <div class="form-group">
                <label>Bucket Name</label>
                <input type="text" @bind="Settings.BucketName" class="form-control" />
            </div>

            <div class="form-check">
                <input type="checkbox" @bind="Settings.VerifyHashOnUpload" class="form-check-input" />
                <label>Verify file integrity after upload (slower but more secure)</label>
            </div>

            <button class="btn btn-primary" @onclick="TestMinIOConnection">
                Test Connection
            </button>
        </div>
    }

    @if (ActiveTab == "security")
    {
        <div class="settings-section">
            <h3>Security Settings</h3>

            <div class="alert alert-warning">
                <i class="fas fa-exclamation-triangle"></i>
                Sensitive settings like passwords cannot be changed here.
                Use environment variables or secure configuration.
            </div>

            <div class="form-check">
                <input type="checkbox" @bind="Settings.RequireAuth" class="form-check-input" />
                <label>Require authentication</label>
            </div>

            <div class="form-check">
                <input type="checkbox" @bind="Settings.EncryptAtRest" class="form-check-input" />
                <label>Encrypt evidence at rest</label>
            </div>
        </div>
    }

    <div class="settings-actions">
        <button class="btn btn-success" @onclick="SaveSettings">
            <i class="fas fa-save"></i> Save Settings
        </button>
      @*   <button class="btn btn-secondary" @onclick="ReloadSettings">
            <i class="fas fa-undo"></i> Reload
        </button> *@
    </div>
</div>

@code {
    private string ActiveTab = "storage";
    private SettingsDto Settings = new();

    protected override async Task OnInitializedAsync()
    {
        Settings = await ApiClient.GetSettingsAsync();
    }

    private async Task SaveSettings()
    {
      
    }

    private async Task TestMinIOConnection()
    {
       
    }
}